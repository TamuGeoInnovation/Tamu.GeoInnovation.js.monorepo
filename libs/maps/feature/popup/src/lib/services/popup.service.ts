import { Component, Injectable, Type } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

import { HitTestSnapshot } from '@tamu-gisc/maps/esri';
import { EnvironmentService } from '@tamu-gisc/common/ngx/environment';

import esri = __esri;

@Injectable({ providedIn: 'root' })
export class PopupService {
  private _show: BehaviorSubject<boolean> = new BehaviorSubject(true);
  public show = this._show.asObservable();

  private _suppressed: BehaviorSubject<boolean> = new BehaviorSubject(false);
  public suppressed = this._suppressed.asObservable();

  constructor(private environment: EnvironmentService) {}

  /**
   * Determine component ID by one of two methods:
   *
   * - Component name reference by source layer id from top-most graphic in array collection.
   * - Component override reference declaration
   *
   * @param {HitTestSnapshot} snapshot Snapshot object containing graphic collection and the
   *  optional component override reference.
   */
  public getComponent(snapshot: HitTestSnapshot) {
    // Handle case if popup component override is provided.
    if (snapshot.popupComponent) {
      return {
        component: snapshot.popupComponent,
        data: undefined
      };
    } else if (snapshot.graphics && snapshot.graphics[0]) {
      // If no component popup override is provided, determine the popup component from the graphic layer source.

      // Filter out graphics that have a popup component. In cases where a hit test returns more than 1 feature, some features
      // are auto-generated by widgets/components and will result in no-op.
      const validGraphics = snapshot.graphics.filter(
        (g) => g.layer && g.layer.id && (g.layer as ILayerWithPopupComponent).popupComponent
      );

      if (validGraphics.length === 0) {
        return;
      }

      // Layer source ID for the first graphic in the collection
      const [topGraphic] = validGraphics;
      const graphicLayer = topGraphic.layer as ILayerWithPopupComponent;

      // Check if the source has a component declaration
      if (!graphicLayer.popupComponent) {
        return;
      }

      return {
        component: graphicLayer.popupComponent,
        data: topGraphic
      };
    }
  }

  public hidePopup() {
    this._show.next(false);
  }

  public showPopup() {
    this._show.next(true);
  }

  public suppressPopups() {
    this._suppressed.next(true);
  }

  public enablePopups() {
    this._suppressed.next(false);
  }
}

interface ILayerWithPopupComponent extends esri.Layer {
  popupComponent: Type<Component>;
}
